---
title: Процедура добавления записи в этот блог
headerImg: 2016-12-9-hakyll-welcome.png
tags: hakyll, себе
---

Замечательная библиотека [Hakyll](https://jaspervdj.be/hakyll/) позволяет создавать (генерировать) гибкие и безопасные статичные вэб-сайты, вроде персонального блога, на языке Haskell. Никаких php, баз данных и прочей ерунды: записи блога и прочие данные для вэб-страниц хранятся в обычных текстовых файлах и размечаются md (markdown), то есть имеют макимально простой и удобный для человека формат. Процесс генерации HTML и прочего содержимого сайта из этих файлов всецело контролируется программой на Haskell, которая и составляется блогером с использованием Hakyll и других библиотек.

Поддержка и обновление такого блога, соответственно, представляет собой просто поддержку репозитория с

1. маленькой программкой на Haskell (исходники)
2. markdown-файлами c содержанием соответствующих вэб-страниц
3. картинками/видео/css и прочей статикой

Подробно о создании легковесного и невзлавымаего (особенно, если использовать не Apache и прочее, а одну из библиотек Haskell с http-сервером) блога за 10 минут я напишу позже, а сейчас, в **качестве заметки для себя**, приведу пример workflow процесса добавления записи в такой блог.

## Клонирование репозитория с кодом
Клонируем репозиторий с текущим блогом (точнее, *с данными для текущего блога*) на машину с Haskell и stack:

``` bash
cd projects
git clone linklevel.net:~/nbrk.linklevel.net.git
cd nbrk.linklevel.net
```

В моём репо ветка master отслеживает собственно готовые html-файлы (пригодные для заказчки на сервер), а ветка hakyll используется для работы над сайтом из текстового редактора.

``` bash
git checkout hakyll
```

## Создание новой записи в блог
Просто пишем plain-текст (с возможностями markdown) в новый файл в директории post. Даже имя можно взять от балды.

	posts/2016-12-09-hakyalladdpost.markdown

``` markdown
---
title: Простая и понятная процедура обновления блога
tags: hakyll, заметка
---

Замечательная библиотека [Hakyll](https://jaspervdj.be/hakyll/) позволяет создавать (генерировать) гибкие и безопасные статичные вэб-сайты, вроде персонального блога, на языке Haskell. Никаких php, баз данных и прочей ерунды: записи блога и прочие данные для вэб-страниц хранятся в обычных текстовых файлах и размечаются md (markdown), то есть имеют макимально простой и удобный для человека формат. Процесс генерации HTML и прочего содержимого сайта из этих файлов всецело контролируется программой на Haskell, которая и составляется блогером с использованием Hakyll и других библиотек.

Поддержка и обновление такого блога, соответственно, представляет собой просто поддержку репозитория с

1. маленькой программкой на Haskell (исходники)
2. markdown-файлами c содержанием соответствующих вэб-страниц
3. картинками/видео/css и прочей статикой

```

Картинки и прочие мультимедиа данные добавляются на сайт обычным копированием в любую поддиректорию нашей программы; на эти элементы можно ссылаться в тексте markdown. Пример картинки:

~~~ markdown
Вот такая картинка ![](../static/img/haskell-logo.png) будет вставлена в текст. Параметрами вставки, размерами и т.п. можно управлять.
~~~

## Пересборка генератора, просмотр сгенерированного сайта
После мы регенерим наш сайт и просматриваем его на локальном комьютере:

~~~ bash
stack build # перестройка нашей программы-генератора блога
stack exec blog build # запуск нашей программы для генерации собственно наполнения сайта 

# запускаем вэб-сервер и просматриваем локально (127.0.0.1:8000)
stack exec blog watch
~~~

## Сохранение изменений в репозиторий с кодом, обновление файлов сайта на вэб-сервере
Если меня устроили изменения в сайте, я коммичу код в репо (ветка hakyll), удаляю всё из ветки master и кладу в неё обновлённое содержимое сайта, затем снова переключаюсь на ветку hakyll (вернувшись в исходное состояние). 

Я использую rsync для синхронизации с wwwroot вэб-сервера (в моей конфигурации вэб-сервер читает директорию в моём `~` на сервере). 

Всё это делает простенький скриптик (об этом в другой статье), так что, когда я доволен результатом, я просто говорю:

``` bash
./deploy "add new post"
```

И оно само себя собирает и закачивает. То есть *весь техпроцесс в итоге сводится* к:

~~~ bash
cd projects/nbrk.linklevel.net # мой клонированный репо с блогом

# пишем новый пост в md-файлик
emacs posts/2016-12-10-newPostName.markdown

# смотрим на результат (127.0.0.1:8000) и, может быть, редактируем
stack exec blog build && stack exec blog watch

# коммитим изменения (а также новые файлы вроде автосгенеренных картинок к заголовку) на обеи ветки, публикуем
./deploy "add new post about coffee"
~~~

Вот, собственно, и всё.
